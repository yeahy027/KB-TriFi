import { defineComponent as m, inject as l, computed as n, openBlock as t, createElementBlock as e, mergeProps as v, renderSlot as M, createCommentVNode as y, createElementVNode as o } from "vue";
const H = ["width", "height", "fill", "transform"], Z = { key: 0 }, f = /* @__PURE__ */ o("path", { d: "M39.51,80.49a12,12,0,0,1,17-17L128,135l71.51-71.52a12,12,0,0,1,17,17l-80,80a12,12,0,0,1-17,0ZM208,180H48a12,12,0,0,0,0,24H208a12,12,0,0,0,0-24Z" }, null, -1), w = [
  f
], k = { key: 1 }, x = /* @__PURE__ */ o("path", {
  d: "M208,72l-80,80L48,72Z",
  opacity: "0.2"
}, null, -1), C = /* @__PURE__ */ o("path", { d: "M122.34,157.66a8,8,0,0,0,11.32,0l80-80A8,8,0,0,0,208,64H48a8,8,0,0,0-5.66,13.66ZM188.69,80,128,140.69,67.31,80ZM216,192a8,8,0,0,1-8,8H48a8,8,0,0,1,0-16H208A8,8,0,0,1,216,192Z" }, null, -1), L = [
  x,
  C
], S = { key: 2 }, z = /* @__PURE__ */ o("path", { d: "M42.34,77.66A8,8,0,0,1,48,64H208a8,8,0,0,1,5.66,13.66l-80,80a8,8,0,0,1-11.32,0ZM208,184H48a8,8,0,0,0,0,16H208a8,8,0,0,0,0-16Z" }, null, -1), A = [
  z
], B = { key: 3 }, N = /* @__PURE__ */ o("path", { d: "M43.76,76.24a6,6,0,0,1,8.48-8.48L128,143.51l75.76-75.75a6,6,0,0,1,8.48,8.48l-80,80a6,6,0,0,1-8.48,0ZM208,186H48a6,6,0,0,0,0,12H208a6,6,0,0,0,0-12Z" }, null, -1), b = [
  N
], E = { key: 4 }, P = /* @__PURE__ */ o("path", { d: "M42.34,77.66A8,8,0,0,1,53.66,66.34L128,140.69l74.34-74.35a8,8,0,0,1,11.32,11.32l-80,80a8,8,0,0,1-11.32,0ZM208,184H48a8,8,0,0,0,0,16H208a8,8,0,0,0,0-16Z" }, null, -1), V = [
  P
], W = { key: 5 }, $ = /* @__PURE__ */ o("path", { d: "M45.17,74.83a4,4,0,0,1,5.66-5.66L128,146.34l77.17-77.17a4,4,0,1,1,5.66,5.66l-80,80a4,4,0,0,1-5.66,0ZM208,188H48a4,4,0,0,0,0,8H208a4,4,0,0,0,0-8Z" }, null, -1), j = [
  $
], D = {
  name: "PhCaretLineDown"
}, G = /* @__PURE__ */ m({
  ...D,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(d) {
    const a = d, c = l("weight", "regular"), _ = l("size", "1em"), h = l("color", "currentColor"), u = l("mirrored", !1), s = n(() => a.weight ?? c), i = n(() => a.size ?? _), p = n(() => a.color ?? h), g = n(() => a.mirrored !== void 0 ? a.mirrored ? "scale(-1, 1)" : void 0 : u ? "scale(-1, 1)" : void 0);
    return (r, q) => (t(), e("svg", v({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: i.value,
      height: i.value,
      fill: p.value,
      transform: g.value
    }, r.$attrs), [
      M(r.$slots, "default"),
      s.value === "bold" ? (t(), e("g", Z, w)) : s.value === "duotone" ? (t(), e("g", k, L)) : s.value === "fill" ? (t(), e("g", S, A)) : s.value === "light" ? (t(), e("g", B, b)) : s.value === "regular" ? (t(), e("g", E, V)) : s.value === "thin" ? (t(), e("g", W, j)) : y("", !0)
    ], 16, H));
  }
});
export {
  G as default
};
