import { defineComponent as m, inject as n, computed as a, openBlock as t, createElementBlock as e, mergeProps as v, renderSlot as y, createCommentVNode as f, createElementVNode as o } from "vue";
const w = ["width", "height", "fill", "transform"], M = { key: 0 }, A = /* @__PURE__ */ o("path", { d: "M228,128a12,12,0,0,1-6.86,10.84l-152,72a12,12,0,0,1-10.27-21.69L188,128,58.87,66.85A12,12,0,0,1,69.14,45.16l152,72A12,12,0,0,1,228,128Z" }, null, -1), k = [
  A
], Z = { key: 1 }, x = /* @__PURE__ */ o("path", {
  d: "M216,128,64,200V56Z",
  opacity: "0.2"
}, null, -1), L = /* @__PURE__ */ o("path", { d: "M224,128a8,8,0,0,1-4.58,7.23l-152,72a8,8,0,1,1-6.85-14.46L197.31,128,60.58,63.23a8,8,0,1,1,6.85-14.46l152,72A8,8,0,0,1,224,128Z" }, null, -1), S = [
  x,
  L
], z = { key: 2 }, C = /* @__PURE__ */ o("path", { d: "M208,32H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32ZM187.35,135.26l-104,48a8,8,0,0,1-6.7-14.52L164.91,128,76.65,87.26a8,8,0,1,1,6.7-14.52l104,48a8,8,0,0,1,0,14.52Z" }, null, -1), V = [
  C
], B = { key: 3 }, N = /* @__PURE__ */ o("path", { d: "M222,128a6,6,0,0,1-3.43,5.42l-152,72a6,6,0,1,1-5.14-10.84L202,128,61.43,61.42a6,6,0,1,1,5.14-10.84l152,72A6,6,0,0,1,222,128Z" }, null, -1), b = [
  N
], E = { key: 4 }, H = /* @__PURE__ */ o("path", { d: "M224,128a8,8,0,0,1-4.58,7.23l-152,72a8,8,0,1,1-6.85-14.46L197.31,128,60.58,63.23a8,8,0,1,1,6.85-14.46l152,72A8,8,0,0,1,224,128Z" }, null, -1), P = [
  H
], W = { key: 5 }, $ = /* @__PURE__ */ o("path", { d: "M220,128a4,4,0,0,1-2.29,3.62l-152,72A3.85,3.85,0,0,1,64,204a4,4,0,0,1-1.71-7.62L206.66,128,62.29,59.62a4,4,0,0,1,3.42-7.23l152,72A4,4,0,0,1,220,128Z" }, null, -1), j = [
  $
], G = {
  name: "PhGreaterThan"
}, D = /* @__PURE__ */ m({
  ...G,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(d) {
    const l = d, c = n("weight", "regular"), _ = n("size", "1em"), h = n("color", "currentColor"), u = n("mirrored", !1), s = a(() => l.weight ?? c), i = a(() => l.size ?? _), p = a(() => l.color ?? h), g = a(() => l.mirrored !== void 0 ? l.mirrored ? "scale(-1, 1)" : void 0 : u ? "scale(-1, 1)" : void 0);
    return (r, T) => (t(), e("svg", v({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: i.value,
      height: i.value,
      fill: p.value,
      transform: g.value
    }, r.$attrs), [
      y(r.$slots, "default"),
      s.value === "bold" ? (t(), e("g", M, k)) : s.value === "duotone" ? (t(), e("g", Z, S)) : s.value === "fill" ? (t(), e("g", z, V)) : s.value === "light" ? (t(), e("g", B, b)) : s.value === "regular" ? (t(), e("g", E, P)) : s.value === "thin" ? (t(), e("g", W, j)) : f("", !0)
    ], 16, w));
  }
});
export {
  D as default
};
